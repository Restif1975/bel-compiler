;;; Compiled
;;; in Emacs version xx
;;; without optimization

(byte-code (apply (quote unibyte-string) (quote (192 193 77 194 195 77 196 197 77 198 199 77 200 201 77 202 203 77 204 205 77 206 207 77 208 209 77 210 211 77 212 213 77 214 215 77 216 217 77 218 219 77 220 221 77 222 223 77 224 225 77 226 227 77 228 229 77 230 231 77 232 233 77 234 235 77 236 237 77 238 239 77 240 241 77 242 243 77 244 245 77 246 247 77 248 249 77 250 251 77 252 253 77 254 255 77 129 64 0 129 65 0 77 129 66 0 129 67 0 77 129 68 0 129 69 0 77 129 70 0 129 71 0 77 129 72 0 129 73 0 77 129 74 0 129 75 0 77 129 76 0 129 77 0 77 129 78 0 129 79 0 77 228 129 80 0 77 129 81 0 129 82 0 77 135))) (apply (quote vector) (list (quote type_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (137 57 131 9 0 192 130 37 0 137 59 131 18 0 193 130 37 0 137 167 131 27 0 194 130 37 0 137 58 131 36 0 195 130 37 0 196 135))) (apply (quote vector) (list (quote symbol) (quote string) (quote number) (quote pair) (quote nil))) 2) (quote join_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6802))) (apply (quote unibyte-string) (quote (137 58 131 10 0 137 64 130 11 0 192 1 65 58 131 23 0 1 65 64 130 24 0 192 1 1 66 178 1 178 1 135))) (apply (quote vector) (list (quote nil))) 5) (quote prn_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 193 2 34 136 194 195 33 136 196 1 33 135))) (apply (quote vector) (list (quote map_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (192 1 33 136 193 194 33 135))) (apply (quote vector) (list (quote prin1) (quote write-char) (quote ?\s))) 3) (quote write-char) (quote ?\n) (quote last_plain))) 4) (quote last_plain) (make-byte-code (byte-compile-make-args-desc (quote (xs))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 26 0 192 1 65 33 131 22 0 137 64 130 26 0 194 1 65 33 135))) (apply (quote vector) (list (quote no_plain) (quote nil) (quote last_plain))) 3) (quote no_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (137 192 61 135))) (apply (quote vector) (list (quote nil))) 3) (quote atom_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (192 1 58 33 135))) (apply (quote vector) (list (quote no_plain))) 3) (quote all_plain) (make-byte-code (byte-compile-make-args-desc (quote (f xs))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 26 0 1 1 64 33 131 25 0 194 2 2 65 34 130 26 0 195 135))) (apply (quote vector) (list (quote no_plain) (quote t) (quote all_plain) (quote nil))) 5) (quote proper_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (192 1 33 137 131 11 0 137 130 38 0 1 58 137 131 24 0 193 3 65 33 130 25 0 194 178 1 137 131 35 0 137 130 36 0 194 178 1 178 1 135))) (apply (quote vector) (list (quote no_plain) (quote proper_plain) (quote nil))) 5) (quote some_plain) (make-byte-code (byte-compile-make-args-desc (quote (f l))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 26 0 1 1 64 33 131 21 0 137 130 26 0 194 2 2 65 34 135))) (apply (quote vector) (list (quote no_plain) (quote nil) (quote some_plain))) 5) (quote idfn_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (137 135))) (apply (quote vector) (list)) 2) (quote reduce_plain) (make-byte-code (byte-compile-make-args-desc (quote (f xs))) (apply (quote unibyte-string) (quote (192 1 65 33 131 12 0 137 64 130 21 0 1 1 64 193 4 4 65 34 34 135))) (apply (quote vector) (list (quote no_plain) (quote reduce_plain))) 7) (quote cons_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 193 2 34 135))) (apply (quote vector) (list (quote reduce_plain) (quote join_plain))) 4) (quote map_plain) (make-byte-code (byte-compile-make-args-desc (quote (f l))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 21 0 194 2 2 64 33 195 4 4 65 34 34 135))) (apply (quote vector) (list (quote no_plain) (quote nil) (quote cons_plain) (quote map_plain))) 7) (quote first_plain) (make-byte-code (byte-compile-make-args-desc (quote (n xs))) (apply (quote unibyte-string) (quote (192 2 193 34 131 21 0 194 1 64 195 4 196 90 4 65 34 34 130 22 0 197 135))) (apply (quote vector) (list (quote >) 0 (quote cons_plain) (quote first_plain) 1 (quote nil))) 7) (quote snoc_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 1 64 2 65 34 135))) (apply (quote vector) (list (quote append))) 4) (quote rev_plain) (make-byte-code (byte-compile-make-args-desc (quote (xs))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 18 0 194 195 2 65 33 2 64 34 135))) (apply (quote vector) (list (quote no_plain) (quote nil) (quote snoc_plain) (quote rev_plain))) 4) (quote mem_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6803))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 58 131 19 0 2 65 65 64 130 20 0 192 193 194 195 5 4 35 3 34 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote some_plain) (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (y))) (apply (quote unibyte-string) (quote (193 1 192 34 135))) (apply (quote vector) (list (quote V0) (quote V1))) 4))) 9) (quote in_plain) (make-byte-code (byte-compile-make-args-desc (quote (x &rest ys))) (apply (quote unibyte-string) (quote (192 2 2 34 135))) (apply (quote vector) (list (quote mem_plain))) 5) (quote adjoin_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6804))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 58 131 19 0 2 65 65 64 130 20 0 192 193 3 3 3 35 131 32 0 1 130 36 0 194 3 3 34 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote mem_plain) (quote cons_plain))) 8) (quote foldr_plain) (make-byte-code (byte-compile-make-args-desc (quote (f base &rest args))) (apply (quote unibyte-string) (quote (192 1 33 137 131 11 0 137 130 26 0 193 192 3 34 137 131 23 0 137 130 24 0 194 178 1 178 1 131 35 0 1 130 56 0 195 3 196 197 198 5 34 195 199 6 8 6 8 197 200 6 10 34 36 34 34 135))) (apply (quote vector) (list (quote no_plain) (quote some_plain) (quote nil) (quote apply_plain) (quote snoc_plain) (quote map_plain) (quote _car) (quote foldr_plain) (quote _cdr))) 14) (quote part_plain) (make-byte-code (byte-compile-make-args-desc (quote (f &rest args))) (apply (quote unibyte-string) (quote (192 193 3 3 35 135))) (apply (quote vector) (list (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (&rest rest))) (apply (quote unibyte-string) (quote (194 192 195 193 4 34 34 135))) (apply (quote vector) (list (quote V0) (quote V1) (quote apply_plain) (quote append))) 6))) 6) (quote insert_plain) (make-byte-code (byte-compile-make-args-desc (quote (f x ys))) (apply (quote unibyte-string) (quote (192 1 33 131 11 0 1 67 130 36 0 2 2 2 64 34 131 26 0 193 2 2 34 130 36 0 193 1 64 194 5 5 5 65 35 34 135))) (apply (quote vector) (list (quote no_plain) (quote cons_plain) (quote insert_plain))) 9) (quote sort_plain) (make-byte-code (byte-compile-make-args-desc (quote (f xs))) (apply (quote unibyte-string) (quote (192 193 194 4 34 195 196 4 33 35 135))) (apply (quote vector) (list (quote foldr_plain) (quote part_plain) (quote insert_plain) (quote nil) (quote rev_plain))) 7) (quote find_plain) (make-byte-code (byte-compile-make-args-desc (quote (f xs))) (apply (quote unibyte-string) (quote (192 2 2 34 137 131 13 0 137 64 130 14 0 193 178 1 135))) (apply (quote vector) (list (quote some_plain) (quote nil))) 5) (quote keep_plain) (make-byte-code (byte-compile-make-args-desc (quote (f xs))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 34 0 1 1 64 33 131 29 0 194 1 64 195 4 4 65 34 34 130 34 0 195 2 2 65 34 135))) (apply (quote vector) (list (quote no_plain) (quote nil) (quote cons_plain) (quote keep_plain))) 7) (quote rem_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6805))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 58 131 19 0 2 65 65 64 130 20 0 192 193 194 195 5 4 35 3 34 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote keep_plain) (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (y))) (apply (quote unibyte-string) (quote (194 193 2 192 34 33 135))) (apply (quote vector) (list (quote V0) (quote V1) (quote no_plain))) 5))) 9) (quote get_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6806))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 58 131 19 0 2 65 65 64 130 20 0 192 193 194 195 5 4 35 3 34 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote find_plain) (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (kv))) (apply (quote unibyte-string) (quote (193 1 64 192 34 135))) (apply (quote vector) (list (quote V0) (quote V1))) 4))) 9) (quote put_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6807))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 64 3 65 65 65 58 131 25 0 3 65 65 65 64 130 26 0 192 193 193 5 5 34 194 6 6 5 195 196 6 7 34 35 34 178 1 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote cons_plain) (quote rem_plain) (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (x y))) (apply (quote unibyte-string) (quote (192 2 64 2 34 135))) (apply (quote vector) (list (quote V0))) 5))) 13) (quote con_plain) (make-byte-code (byte-compile-make-args-desc (quote (x))) (apply (quote unibyte-string) (quote (192 193 2 34 135))) (apply (quote vector) (list (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 135))) (apply (quote vector) (list (quote V0))) 2))) 4) (quote compose_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest fs))) (apply (quote unibyte-string) (quote (192 193 2 137 131 11 0 137 130 24 0 194 67 137 131 21 0 137 130 22 0 195 178 1 178 1 34 135))) (apply (quote vector) (list (quote reduce_plain) (make-byte-code (byte-compile-make-args-desc (quote (f g))) (apply (quote unibyte-string) (quote (192 193 3 3 35 135))) (apply (quote vector) (list (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 194 193 3 34 33 135))) (apply (quote vector) (list (quote V0) (quote V1) (quote apply_plain))) 5))) 6) (quote idfn_plain) (quote nil))) 6) (quote upon_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 193 2 34 135))) (apply (quote vector) (list (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (f))) (apply (quote unibyte-string) (quote (193 1 192 34 135))) (apply (quote vector) (list (quote V0) (quote apply_plain))) 4))) 4) (quote best_plain) (make-byte-code (byte-compile-make-args-desc (quote (f xs))) (apply (quote unibyte-string) (quote (192 2 2 34 64 135))) (apply (quote vector) (list (quote sort_plain))) 5) (quote max_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 193 2 34 135))) (apply (quote vector) (list (quote best_plain) (quote _>))) 4) (quote min_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (192 193 2 34 135))) (apply (quote vector) (list (quote best_plain) (quote _<))) 4) (quote of_plain) (make-byte-code (byte-compile-make-args-desc (quote (f g))) (apply (quote unibyte-string) (quote (192 193 3 3 35 135))) (apply (quote vector) (list (quote make-closure) (make-byte-code (byte-compile-make-args-desc (quote (&rest args))) (apply (quote unibyte-string) (quote (194 192 195 193 4 34 34 135))) (apply (quote vector) (list (quote V0) (quote V1) (quote apply_plain) (quote map_plain))) 6))) 6) (quote len_plain) (make-byte-code (byte-compile-make-args-desc (quote (xs))) (apply (quote unibyte-string) (quote (192 1 33 131 10 0 193 130 17 0 194 195 196 197 35 1 33 135))) (apply (quote vector) (list (quote no_plain) 0 (quote compose_plain) (quote inc_plain) (quote len_plain) (quote _cdr))) 5) (quote inc_plain) (make-byte-code (byte-compile-make-args-desc (quote (n))) (apply (quote unibyte-string) (quote (137 192 92 135))) (apply (quote vector) (list 1)) 3) (quote dec_plain) (make-byte-code (byte-compile-make-args-desc (quote (n))) (apply (quote unibyte-string) (quote (137 192 90 135))) (apply (quote vector) (list 1)) 3) (quote nth_plain) (make-byte-code (byte-compile-make-args-desc (quote (n xs))) (apply (quote unibyte-string) (quote (1 192 154 131 11 0 137 64 130 18 0 193 2 192 90 2 65 34 135))) (apply (quote vector) (list 1 (quote nth_plain))) 5) (quote nthcdr_plain) (make-byte-code (byte-compile-make-args-desc (quote (n xs))) (apply (quote unibyte-string) (quote (192 2 193 34 131 17 0 194 2 195 90 2 65 34 130 18 0 137 135))) (apply (quote vector) (list (quote >) 0 (quote nthcdr_plain) 1)) 5) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6808))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 58 131 19 0 2 65 65 64 130 20 0 192 193 3 3 3 35 131 32 0 1 130 36 0 194 3 3 34 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote mem_plain) (quote cons_plain))) 8) (quote caris_plain) (make-byte-code (byte-compile-make-args-desc (quote (&rest v6809))) (apply (quote unibyte-string) (quote (137 64 1 65 64 2 65 65 58 131 19 0 2 65 65 64 130 20 0 192 2 58 137 131 34 0 1 4 64 4 34 130 35 0 193 178 1 178 1 178 1 178 1 135))) (apply (quote vector) (list (quote _equal) (quote nil))) 8))) 43)